{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectTodo","selectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","query","setQuery","clearButtonFilter","option","setOption","value","onChange","ev","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","closeModal","useState","user","setUser","selectedTodo","setSelectedTodo","useEffect","foundTodo","find","userId","name","href","email","App","setTodos","setSelectTodoId","todosFromServer","filteredTodoTitle","setFilteredTodoTitle","selectVisibleTodo","setSelectVisibleTodo","visibleTodos","useMemo","filter","filterTitle","toLowerCase","includes","length","preventDefault","todoIDfromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f46f937.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectTodo: (todoId: number) => void,\n  selectedTodoId: number,\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    selectTodo,\n    selectedTodoId,\n  },\n) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className=\"\"\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {!todo.completed\n              ? <td className=\"is-vcentered\" />\n              : (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              )}\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames('', {\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {selectedTodoId === todo.id\n                ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button is-link\"\n                    type=\"button\"\n                    onClick={() => {\n                      selectTodo(0);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    onClick={() => {\n                      selectTodo(todo.id);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  query: string,\n  setQuery: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  clearButtonFilter:\n  (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void,\n  option: string,\n  setOption: (option: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  clearButtonFilter,\n  option,\n  setOption,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={option}\n            onChange={(ev) => {\n              setOption(ev.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={setQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={clearButtonFilter}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable no-lone-blocks */\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  closeModal: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = (\n  {\n    todos,\n    selectedTodoId,\n    closeModal,\n  },\n) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    const foundTodo = todos.find(todo => todo.id === selectedTodoId);\n\n    if (foundTodo) {\n      setSelectedTodo(foundTodo);\n    }\n  }, [selectedTodo]);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId).then(setUser);\n    }\n  }, [selectedTodo]);\n  {\n    if (!user) {\n      return <Loader />;\n    }\n  }\n\n  return (\n\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${selectedTodo?.id}`}\n          </div>\n\n          <button\n            type=\"button\"\n            onClick={closeModal}\n            className=\"delete\"\n            data-cy=\"modal-close\"\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {selectedTodo?.title}\n          </p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            <strong className=\"has-text-danger\">\n              {user && `Planned by ${user.name}`}\n            </strong>\n\n            {' by '}\n\n            <a href=\"mailto:Sincere@april.biz\">\n              {user.email}\n            </a>\n          </p>\n        </div>\n      </div>\n\n    </div>\n\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const [selectedTodoId, setSelectTodoId] = useState(0);\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => {\n      setTodos(todosFromServer);\n    });\n  }, []);\n\n  const [filteredTodoTitle, setFilteredTodoTitle] = useState('');\n  const [selectVisibleTodo, setSelectVisibleTodo] = useState('all');\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const filterTitle = todo.title\n        .toLowerCase()\n        .includes(filteredTodoTitle.toLowerCase());\n\n      switch (selectVisibleTodo) {\n        case 'active':\n          return !todo.completed && filterTitle;\n        case 'completed':\n          return todo.completed && filterTitle;\n        default:\n          return filterTitle;\n      }\n    });\n  }, [todos, filteredTodoTitle, selectVisibleTodo]);\n\n  if (!todos.length) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={filteredTodoTitle}\n                setQuery={(ev) => {\n                  setFilteredTodoTitle(ev.target.value);\n                }}\n                clearButtonFilter={(ev) => {\n                  ev.preventDefault();\n                  setFilteredTodoTitle('');\n                }}\n                option={selectVisibleTodo}\n                setOption={setSelectVisibleTodo}\n              />\n            </div>\n\n            <div className=\"block\">\n              <TodoList\n                todos={visibleTodos}\n                selectedTodoId={selectedTodoId}\n                selectTodo={(todoIDfromServer:\n                React.SetStateAction<number>) => {\n                  setSelectTodoId(todoIDfromServer);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodoId && (\n        <TodoModal\n          todos={todos}\n          selectedTodoId={selectedTodoId}\n          closeModal={() => setSelectTodoId(0)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}